#include "server-db.h"

#include <stdlib.h>

#define COMMAND_LEN 7
#define SMM_LOGIN_LEN 51
#define SMM_SERVER_LEN 256
#define SMM_PASSWORD_LEN 256

void db_connect(const char *host, const char *user, const char *pass, const char *db)
{
    char *target = NULL;
    if (asprintf(&target, "%s@%s", db, host) < 0)
    {
        return;
    }
    EXEC SQL BEGIN DECLARE SECTION;
    const char *db_target = target;
    const char *db_user = user;
    const char *db_pass = pass;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR SQLPRINT;

    if (db_pass != NULL && strlen(db_pass) > 0)
    {
        EXEC SQL CONNECT TO :db_target AS conn USER :db_user USING :db_pass;
    }
    else
    {
        EXEC SQL CONNECT TO :db_target AS conn USER :db_user;
    }
    
    EXEC SQL SET AUTOCOMMIT TO ON;
    
    free(target);
}

unsigned long long db_get_asset_id(const char *asset_name_arg)
{
    EXEC SQL BEGIN DECLARE SECTION;
    const char *asset_name = asset_name_arg;
    unsigned long long asset_id = 0;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT id INTO :asset_id FROM assets_asset WHERE name = :asset_name;
    
    return asset_id;
}

void db_rtt_create_entry(unsigned long long asset_id_arg, unsigned long long delta)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    unsigned long long rtt = delta;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL INSERT INTO assets_assetrtt (asset_id, rtt, timestamp) VALUES (:asset_id, :rtt, NOW());
}

void db_status_create_entry(unsigned long long asset_id_arg, unsigned short bat_percent, unsigned int bat_mah_used)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    unsigned short bp = bat_percent;
    unsigned long bu = bat_mah_used;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL INSERT INTO assets_assetstatus (asset_id, bat_percent, bat_used_mah, timestamp) VALUES (:asset_id, :bp, :bu, NOW());
}

void db_search_status_create_entry(unsigned long long asset_id_arg, unsigned long long search_id, unsigned long long search_completed, unsigned long long search_total)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    unsigned long long s = search_id;
    unsigned long long sp = search_completed;
    unsigned long long spo = search_total;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL INSERT INTO assets_assetsearchprogress (asset_id, search, search_progress, search_progress_of, timestamp) VALUES (:asset_id, :s, :sp, :spo, NOW());
}

void db_position_create_entry(unsigned long long asset_id_arg, double latitude, double longitude, int altitude)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    double lat = latitude;
    double lng = longitude;
    int alt = altitude;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL INSERT INTO assets_assetposition (asset_id, position, altitude, timestamp) VALUES (:asset_id, ST_SetSRID(ST_MakePoint(:lng, :lat), 4326), :alt, NOW());
}

struct asset_command_s *
db_asset_command_get(unsigned long long asset_id_arg)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    unsigned long long id = 0;
    unsigned long long ts;
    char command[COMMAND_LEN];
    double lat;
    double lng;
    int alt;
    int success = 0;
    int lat_ind;
    int lng_ind;
    int alt_ind;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT 1, AC.id, (extract(epoch from AC.timestamp) * 1000)::bigint, AC.command, ST_Y(AC.position::geometry), ST_X(AC.position::geometry), AC.altitude INTO :success, :id, :ts, :command, :lat :lat_ind, :lng :lng_ind, :alt :alt_ind FROM assets_assetcommand AS AC WHERE AC.asset_id = :asset_id ORDER BY AC.timestamp DESC LIMIT 1;


    struct asset_command_s *res = NULL;
    if (success == 1)
    {
        res = malloc(sizeof(struct asset_command_s));
        res->dbid = id;
        res->command = strdup(command);
        res->timestamp = ts;
        res->latitude = lat;
        res->longitude = lng;
        res->altitude = alt;
    }
    return res;
}

#define HTTP_PORT 80
#define HTTPS_PORT 443

char *
convert_to_http(const char *address, int port, bool https)
{
    bool default_port = false;
    if (https)
    {
        default_port = (port == HTTPS_PORT);
    }
    else
    {
        default_port = (port == HTTP_PORT);
    }
    char *result = NULL;
    if (default_port)
    {
        if (asprintf(&result, "%s://%s", https ? "https" : "http", address) < 0)
        {
            result = NULL;
        }
    }
    else
    {
        if (asprintf(&result, "%s://%s:%i", https ? "https" : "http", address, port) < 0)
        {
            result = NULL;
        }
    }
    return result;
}

struct smm_settings_s *
db_asset_smm_settings_get(unsigned long long asset_id_arg)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    char server_address[SMM_SERVER_LEN];
    int server_port;
    bool server_https;
    char smm_login[SMM_LOGIN_LEN];
    char smm_password[SMM_PASSWORD_LEN];
    int success = 0;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT 1, SMM.address, SMM.port, SMM.https, A.smm_login, A.smm_password A INTO :success, :server_address, :server_port, :server_https, :smm_login, :smm_password FROM config_assetconfig AS A, config_smmconfig AS SMM WHERE A.asset_id = :asset_id AND A.smm_id = SMM.id;


    struct smm_settings_s *settings = NULL;
    if (success == 1)
    {
        settings = malloc(sizeof(struct smm_settings_s));
        settings->address = convert_to_http(server_address, server_port, server_https);
        settings->username = strdup(smm_login);
        settings->password = strdup(smm_password);
    }
    return settings;
}

struct fss_server_s **
db_active_fss_servers_get(void)
{
    size_t len = 0;
    struct fss_server_s **res = (struct fss_server_s **)malloc(sizeof(struct fss_server_s *) * (len + 1));
    res[len] = NULL;

    EXEC SQL BEGIN DECLARE SECTION;
    char server_address[SMM_SERVER_LEN];
    int server_port;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SET AUTOCOMMIT TO OFF;
    EXEC SQL DECLARE cur1 CURSOR FOR SELECT address, client_port FROM config_serverconfig WHERE active = TRUE;
    EXEC SQL OPEN cur1;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    EXEC SQL WHENEVER SQLERROR DO BREAK;
    EXEC SQL WHENEVER SQLWARNING DO BREAK;
    while (1)
    {
        EXEC SQL FETCH FROM cur1 INTO :server_address, :server_port;
        struct fss_server_s *s = (struct fss_server_s *)malloc(sizeof(struct fss_server_s));
        s->address = strdup(server_address);
        s->port = server_port;
        res[len] = s;
        len++;
        res = (struct fss_server_s **)realloc(res, sizeof(struct fss_server_s *) * (len + 1));
        res[len] = NULL;
    }
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL WHENEVER SQLWARNING CONTINUE;

    EXEC SQL CLOSE cur1;
    EXEC SQL SET AUTOCOMMIT TO ON;

    return res;
}

void db_disconnect()
{
    EXEC SQL DISCONNECT ALL;
}
