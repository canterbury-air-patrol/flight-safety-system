#include "server-db.h"

#include <stdlib.h>

void db_connect(const char *host, const char *user, const char *pass, const char *db)
{
    char *target = NULL;
    asprintf(&target, "%s@%s", db, host);
    EXEC SQL BEGIN DECLARE SECTION;
    const char *db_target = target;
    const char *db_user = user;
    const char *db_pass = pass;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR SQLPRINT;

    if (db_pass != NULL && strlen(db_pass) > 0)
    {
        EXEC SQL CONNECT TO :db_target AS conn USER :db_user USING :db_pass;
    }
    else
    {
        EXEC SQL CONNECT TO :db_target AS conn USER :db_user;
    }
    
    EXEC SQL SET AUTOCOMMIT TO ON;
    
    free(target);
}

unsigned long long db_get_asset_id(const char *asset_name_arg)
{
    EXEC SQL BEGIN DECLARE SECTION;
    const char *asset_name = asset_name_arg;
    unsigned long long asset_id;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL SELECT id INTO :asset_id FROM assets_asset WHERE name = :asset_name;
    
    return asset_id;
}

void db_rtt_create_entry(unsigned long long asset_id_arg, unsigned long long delta)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    unsigned long long rtt = delta;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL INSERT INTO assets_assetrtt (asset_id, rtt, timestamp) VALUES (:asset_id, :rtt, NOW());
}

void db_status_create_entry(unsigned long long asset_id_arg, unsigned short bat_percent, unsigned int bat_mah_used)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    unsigned short bp = bat_percent;
    unsigned long bu = bat_mah_used;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL INSERT INTO assets_assetstatus (asset_id, bat_percent, bat_used_mah, timestamp) VALUES (:asset_id, :bp, :bu, NOW());
}

void db_search_status_create_entry(unsigned long long asset_id_arg, unsigned long long search_id, unsigned long long search_completed, unsigned long long search_total)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    unsigned long long s = search_id;
    unsigned long long sp = search_completed;
    unsigned long long spo = search_total;
    EXEC SQL END DECLARE SECTION;
    
    EXEC SQL INSERT INTO assets_assetsearchprogress (asset_id, search, search_progress, search_progress_of, timestamp) VALUES (:asset_id, :s, :sp, :spo, NOW());
}

void db_position_create_entry(unsigned long long asset_id_arg, double latitude, double longitude, int altitude)
{
    EXEC SQL BEGIN DECLARE SECTION;
    unsigned long long asset_id = asset_id_arg;
    double lat = latitude;
    double lng = longitude;
    unsigned int alt = altitude;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL INSERT INTO assets_assetposition (asset_id, position, altitude, timestamp) VALUES (:asset_id, ST_SetSRID(ST_MakePoint(:lng, :lat), 4326), :alt, NOW());
}

void db_disconnect()
{
    EXEC SQL DISCONNECT ALL;
}
